{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2,
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 109,
            "metadata": {},
            "outputs": [],
            "source": [
                "import warnings\n",
                "warnings.filterwarnings(\"ignore\")\n",
                "import keras\n",
                "from keras.datasets import mnist\n",
                "from keras.models import Sequential\n",
                "from keras.layers import Dense, Dropout, Flatten\n",
                "from keras.layers import Conv2D, MaxPooling2D\n",
                "from keras import backend as K\n",
                "import tensorflow as tf\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 110,
            "metadata": {},
            "outputs": [],
            "source": [
                "batch_size = 64\n",
                "num_classes = 10\n",
                "epochs = 12"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 111,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "x_train shape: (60000, 28, 28, 1)\n60000 train samples\n10000 test samples\nEpoch 1/12\n938/938 - 14s - 15ms/step - accuracy: 0.9031 - loss: 0.3346 - val_accuracy: 0.9695 - val_loss: 0.1021\nEpoch 2/12\n938/938 - 20s - 22ms/step - accuracy: 0.9715 - loss: 0.0950 - val_accuracy: 0.9792 - val_loss: 0.0637\nEpoch 3/12\n938/938 - 21s - 22ms/step - accuracy: 0.9789 - loss: 0.0695 - val_accuracy: 0.9843 - val_loss: 0.0492\nEpoch 4/12\n938/938 - 13s - 14ms/step - accuracy: 0.9831 - loss: 0.0558 - val_accuracy: 0.9853 - val_loss: 0.0447\nEpoch 5/12\n938/938 - 13s - 14ms/step - accuracy: 0.9861 - loss: 0.0466 - val_accuracy: 0.9874 - val_loss: 0.0381\nEpoch 6/12\n938/938 - 13s - 14ms/step - accuracy: 0.9878 - loss: 0.0403 - val_accuracy: 0.9883 - val_loss: 0.0364\nEpoch 7/12\n938/938 - 13s - 14ms/step - accuracy: 0.9889 - loss: 0.0353 - val_accuracy: 0.9862 - val_loss: 0.0405\nEpoch 8/12\n938/938 - 13s - 14ms/step - accuracy: 0.9903 - loss: 0.0314 - val_accuracy: 0.9878 - val_loss: 0.0360\nEpoch 9/12\n938/938 - 13s - 13ms/step - accuracy: 0.9917 - loss: 0.0279 - val_accuracy: 0.9861 - val_loss: 0.0407\nEpoch 10/12\n938/938 - 13s - 14ms/step - accuracy: 0.9927 - loss: 0.0254 - val_accuracy: 0.9890 - val_loss: 0.0344\nEpoch 11/12\n938/938 - 13s - 14ms/step - accuracy: 0.9931 - loss: 0.0227 - val_accuracy: 0.9892 - val_loss: 0.0325\nEpoch 12/12\n938/938 - 13s - 14ms/step - accuracy: 0.9935 - loss: 0.0208 - val_accuracy: 0.9900 - val_loss: 0.0318\n[0.9031166434288025, 0.9715499877929688, 0.978866696357727, 0.9830833077430725, 0.986133337020874, 0.9878333210945129, 0.9889333248138428, 0.9903166890144348, 0.9917166829109192, 0.9926833510398865, 0.993149995803833, 0.9935333132743835]\n[0.9695000052452087, 0.979200005531311, 0.9843000173568726, 0.9853000044822693, 0.9873999953269958, 0.9883000254631042, 0.9861999750137329, 0.9878000020980835, 0.9861000180244446, 0.9890000224113464, 0.9891999959945679, 0.9900000095367432]\nTest loss: 0.031808093190193176\nTest accuracy: 0.9900000095367432\n"
                }
            ],
            "source": [
                "# input image dimensions\n",
                "img_rows, img_cols = 28, 28\n",
                "\n",
                "# the data, split between train and test sets\n",
                "(x_train, y_train), (x_test, y_test)=tf.keras.datasets.mnist.load_data('/home/mnist.npz')\n",
                "\n",
                "if K.image_data_format() == 'channels_first':\n",
                "    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n",
                "    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n",
                "    input_shape = (1, img_rows, img_cols)\n",
                "else:\n",
                "    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n",
                "    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n",
                "    input_shape = (img_rows, img_cols, 1)\n",
                "\n",
                "x_train = x_train.astype('float32')\n",
                "x_test = x_test.astype('float32')\n",
                "x_train /= 255\n",
                "x_test /= 255\n",
                "print('x_train shape:', x_train.shape)\n",
                "print(x_train.shape[0], 'train samples')\n",
                "print(x_test.shape[0], 'test samples')\n",
                "# convert class vectors to binary class matrices\n",
                "y_train = keras.utils.to_categorical(y_train, num_classes)\n",
                "y_test = keras.utils.to_categorical(y_test, num_classes)\n",
                "\n",
                "model = Sequential()\n",
                "model.add(Conv2D(12, kernel_size=(5, 5),\n",
                "                 activation='relu',\n",
                "                 input_shape=input_shape))\n",
                "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
                "model.add(Conv2D(32, (5, 5), activation='relu'))\n",
                "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
                "model.add(Flatten())\n",
                "model.add(Dense(1200, activation='relu'))\n",
                "model.add(Dense(200, activation='relu'))\n",
                "\n",
                "model.add(Dense(num_classes, activation='softmax'))\n",
                "optim = tf.keras.optimizers.Adadelta(learning_rate=0.1, rho=0.95, decay=0.0)\n",
                "# https://keras.io/optimizers/ \n",
                "model.compile(loss=keras.losses.categorical_crossentropy,\n",
                "              optimizer=optim,\n",
                "              metrics=['accuracy'])\n",
                "\n",
                "history = model.fit(x_train, y_train,\n",
                "          batch_size=batch_size,\n",
                "          epochs=epochs,\n",
                "          verbose=2,\n",
                "          validation_data=(x_test, y_test))\n",
                "\n",
                "\n",
                "train_err_history = history.history['accuracy']\n",
                "test_err_history = history.history['val_accuracy']\n",
                "print(train_err_history)\n",
                "print(test_err_history)\n",
                "score = model.evaluate(x_test, y_test, verbose=0)\n",
                "print('Test loss:', score[0])\n",
                "print('Test accuracy:', score[1])"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 112,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "0.09688335657119751\n[0.03049999475479126, 0.020799994468688965, 0.01569998264312744, 0.014699995517730713, 0.01260000467300415, 0.011699974536895752, 0.01380002498626709, 0.012199997901916504, 0.01389998197555542, 0.010999977588653564, 0.010800004005432129, 0.009999990463256836]\n"
                },
                {
                    "data": {
                        "image/png": "",
                        "text/plain": "\u003cFigure size 640x480 with 1 Axes\u003e"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "import matplotlib.pyplot as plt\n",
                "for g in range(len(train_err_history)):\n",
                "    train_err_history[g] = 1 - train_err_history[g]\n",
                "    test_err_history[g] = 1 - test_err_history[g]\n",
                "print(train_err_history[0])\n",
                "print(test_err_history)\n",
                "plt.plot(range(1, 13), train_err_history, label='Train')\n",
                "plt.plot(range(1, 13), test_err_history, label='Test')\n",
                "plt.title('Error vs Epoch')\n",
                "plt.xlabel('Epoch')\n",
                "plt.ylabel('Loss')\n",
                "plt.legend()\n",
                "plt.show()"
            ]
        }
    ]
}
